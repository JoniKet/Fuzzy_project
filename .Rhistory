source('X:/Verkkokurssit/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)/svm.R', echo=TRUE)
source('X:/Verkkokurssit/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)/svm.R', echo=TRUE)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
View(test_set)
View(test_set)
View(test_set)
View(test_set)
y_pred
View(dataset)
View(dataset)
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
View(dataset)
View(dataset)
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
View(training_set)
View(test_set)
test_set[-3]
View(training_set)
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Fitting SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
source('X:/Onedrive/Kursseja/Fuzzy_data_analysis/Practical_assignment/SVM.R', echo=TRUE)
setwd("X:/Onedrive/Kursseja/Fuzzy_data_analysis/Practical_assignment")
source('X:/Onedrive/Kursseja/Fuzzy_data_analysis/Practical_assignment/SVM.R', echo=TRUE)
source('X:/Onedrive/Kursseja/Fuzzy_data_analysis/Practical_assignment/SVM.R', echo=TRUE)
View(train)
View(train)
View(train)
View(train)
training_set[-10]
train[-10]
train[-10] = scale(training_set[-10])
train[-10] = scale(train[-10])
View(train)
train[-10]
train[1]
train = read.csv('data_train_S.csv')
train[1]
train[1:2]
head(train[1:2])
head(train[3])
head(train[4])
head(train[4:7])
head(train[4:9])
head(train[4:10])
head(train[4:11])
train[4:10] = scale(train[4:10])
head(train)
head(train[4:10])
library(e1071)
classifier = svm(formula = y ~ .,
data = train,
type = 'C-classification',
kernel = 'linear')
y_pred = predict(classifier, newdata = test[48])
y_pred = predict(classifier, newdata = test)
y_pred
# Making the Confusion Matrix
cm = table(test[48], y_pred)
test[48]
y_pred
# Making the Confusion Matrix
cm = table(test[48], y_pred)
nrow(y_pred)
summary(y_pred)
test[48]
cm = table(test[48], y_pred)
y_pred = predict(classifier, newdata = test)
y_pred
# Making the Confusion Matrix
cm = table(test[48], y_pred)
cm = table(test[48], y_pred)
len(y_pred)
?length
length(y_pred)
length(test[48])
test[48]
test[,48]
# Making the Confusion Matrix
cm = table(test[,48], y_pred)
cm
cm(1,1)
cm[1,1]
acc = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
acc
source('X:/Onedrive/Kursseja/Fuzzy_data_analysis/Practical_assignment/SVM.R', echo=TRUE)
cm
? svm
source('X:/Onedrive/Kursseja/Fuzzy_data_analysis/Practical_assignment/SVM.R', echo=TRUE)
variable.names(train)
source('X:/Onedrive/Kursseja/Fuzzy_data_analysis/Practical_assignment/SVM.R', echo=TRUE)
source('X:/Onedrive/Kursseja/Fuzzy_data_analysis/Practical_assignment/SVM.R', echo=TRUE)
source('X:/Onedrive/Kursseja/Fuzzy_data_analysis/Practical_assignment/SVM.R', echo=TRUE)
cm
sen = cm[2,2]/(cm[2,2]+cm[1,2])
cm[1,2]
cm[2,1]
sen = cm[2,2]/(cm[2,2]+cm[2,1])
spe = cm[1,1]/(cm[1,1]+cm[1,2])
sen
spe
y_pred2 = predict(classifier, newdata = train)
cm = table(train[,48], y_pred2)
acc = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[1,2]+cm[2,1])
sen = cm[2,2]/(cm[2,2]+cm[2,1])
spe = cm[1,1]/(cm[1,1]+cm[1,2])
# Importing the dataset
train = read.csv('data_train.csv')
test = read.csv('data_test.csv')
# Feature Scaling
train[4:10] = scale(train[4:10])
test[4:10] = scale(test[4:10])
# Fitting naibe bayes classification
library(e1071)
classifier = naiveBayes(x = train[-47],
y = train$y)
View(classifier)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test)
train[-47]
head(train[-47])
head(train[-46])
head(train[-48])
source('X:/Onedrive/Kursseja/Fuzzy_data_analysis/Practical_assignment/naive_bayes.R', echo=TRUE)
length(test$y)
length(y_pred)
